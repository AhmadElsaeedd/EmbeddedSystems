
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c7  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006da  00000000  00000000  000009bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00001095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010f  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z13updateDisplayh>:
#include <util/delay.h>

void updateDisplay(uint8_t state) {
	// Update the 7-segment display segments (D0, D1, D2)
	// Here only 3 bits are used to control 3 segments
	PORTD = (PORTD & 0xF8) | (state & 0x07);
  80:	9b b1       	in	r25, 0x0b	; 11
  82:	98 7f       	andi	r25, 0xF8	; 248
  84:	87 70       	andi	r24, 0x07	; 7
  86:	89 2b       	or	r24, r25
  88:	8b b9       	out	0x0b, r24	; 11
  8a:	08 95       	ret

0000008c <main>:
}

int main(void)
{
	// Initialize Port B for button input
	DDRB &= ~(1<<DDB3);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	87 7f       	andi	r24, 0xF7	; 247
  90:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB4);
  92:	84 b1       	in	r24, 0x04	; 4
  94:	8f 7e       	andi	r24, 0xEF	; 239
  96:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB3);
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PORTB4);
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	85 b9       	out	0x05, r24	; 5

	// Initialize Port D for 7-segment display output
	//DDRD = 0xFF;
	DDRD = 0b00000111;
  a4:	87 e0       	ldi	r24, 0x07	; 7
  a6:	8a b9       	out	0x0a, r24	; 10
	uint8_t state = 0;

	while (1)
	{
		// Check button states (active low due to pull-up resistors)
		if ((PINB & (1 << PORTB3))) {
  a8:	1b 99       	sbic	0x03, 3	; 3
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <main+0x24>
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <main+0x26>
			// Transition A fires: Move token to placeA
			placeA = 1;
  b0:	91 e0       	ldi	r25, 0x01	; 1
		}
		if ((PINB & (1 << PORTB4))) {
  b2:	1c 99       	sbic	0x03, 4	; 3
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x2e>
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	01 c0       	rjmp	.+2      	; 0xbc <main+0x30>
			// Transition B fires: Move token to placeB
			placeB = 1;
  ba:	21 e0       	ldi	r18, 0x01	; 1
		}

		// Update the state of the 7-segment display based on places
		state = 0;
		if (placeA) {
  bc:	91 11       	cpse	r25, r1
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x38>
			// Transition B fires: Move token to placeB
			placeB = 1;
		}

		// Update the state of the 7-segment display based on places
		state = 0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <main+0x3a>
		if (placeA) {
			// Turn on segment A (mapped to D0)
			state |= 0x01;
  c4:	81 e0       	ldi	r24, 0x01	; 1
		}
		if (placeB) {
  c6:	21 11       	cpse	r18, r1
			// Turn on segment B (mapped to D1)
			state |= 0x02;
  c8:	82 60       	ori	r24, 0x02	; 2
		}
		
		if(placeA && placeB){
  ca:	99 23       	and	r25, r25
  cc:	79 f0       	breq	.+30     	; 0xec <main+0x60>
  ce:	22 23       	and	r18, r18
  d0:	69 f0       	breq	.+26     	; 0xec <main+0x60>
			// Both buttons pressed: First turn on D0 and D1
			state |= 0x01 | 0x02;
			updateDisplay(state);
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	0e 94 40 00 	call	0x80	; 0x80 <_Z13updateDisplayh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f e7       	ldi	r18, 0x7F	; 127
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	9e e1       	ldi	r25, 0x1E	; 30
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x52>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x5c>
  e8:	00 00       	nop
			_delay_ms(10000);  // Wait 10 seconds

			// Now turn off D0 and D1 and turn on D2
			state = 0x04;
  ea:	84 e0       	ldi	r24, 0x04	; 4
		}
		
		updateDisplay(state);
  ec:	0e 94 40 00 	call	0x80	; 0x80 <_Z13updateDisplayh>
  f0:	2f e7       	ldi	r18, 0x7F	; 127
  f2:	8a e1       	ldi	r24, 0x1A	; 26
  f4:	96 e0       	ldi	r25, 0x06	; 6
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x6a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x74>
 100:	00 00       	nop
 102:	d2 cf       	rjmp	.-92     	; 0xa8 <main+0x1c>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
