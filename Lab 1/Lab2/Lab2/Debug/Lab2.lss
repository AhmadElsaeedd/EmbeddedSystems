
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001f4  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000789  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067c  00000000  00000000  00000ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000306  00000000  00000000  00001141  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000187  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  9e:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z5setupv>:
	0b01101111
};

//setup pins and interrupts
void setup() {
	cli();
  a6:	f8 94       	cli
	//setup pins for rotary encoder
	DDRB &= ~(1 << DDB2);  //port b2 as input
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB3);  //port b3 as input
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	87 7f       	andi	r24, 0xF7	; 247
  b2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB4); //port b4 as input
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	84 b9       	out	0x04, r24	; 4

	//enabling pull up resistors
	PORTB |= (1 << PORTB2);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PORTB3);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PORTB4);
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	85 b9       	out	0x05, r24	; 5

	//set up interrupts for rotary encoder
	PCICR |= (1 << PCIE0);
  cc:	e8 e6       	ldi	r30, 0x68	; 104
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT2);
  d6:	eb e6       	ldi	r30, 0x6B	; 107
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT3);
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT4);
  e6:	80 81       	ld	r24, Z
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 83       	st	Z, r24

	// Initialize 7-segment display pins as output and set low
	DDRD = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a b9       	out	0x0a, r24	; 10

	// Enable global interrupts
	sei();
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <_Z13updateDisplayv>:
}

// Update display function
void updateDisplay() {
	PORTD = seven_segment_digits[count];
  f4:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <count>
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	e0 50       	subi	r30, 0x00	; 0
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	80 81       	ld	r24, Z
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <__vector_3>:
}

// Interrupt Service Routine
ISR(PCINT0_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	cf 93       	push	r28
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	uint8_t A = (PINB >> DDB2) & 1;
 128:	83 b1       	in	r24, 0x03	; 3
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	95 95       	asr	r25
 12e:	87 95       	ror	r24
 130:	95 95       	asr	r25
 132:	87 95       	ror	r24
 134:	81 70       	andi	r24, 0x01	; 1
	uint8_t B = (PINB >> DDB3) & 1;
 136:	23 b1       	in	r18, 0x03	; 3
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	35 95       	asr	r19
 13c:	27 95       	ror	r18
 13e:	35 95       	asr	r19
 140:	27 95       	ror	r18
 142:	35 95       	asr	r19
 144:	27 95       	ror	r18
 146:	92 2f       	mov	r25, r18
 148:	91 70       	andi	r25, 0x01	; 1
	uint8_t SW = (PINB >> DDB4) & 1;
 14a:	23 b1       	in	r18, 0x03	; 3
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	35 95       	asr	r19
 150:	27 95       	ror	r18
 152:	35 95       	asr	r19
 154:	27 95       	ror	r18
 156:	35 95       	asr	r19
 158:	27 95       	ror	r18
 15a:	35 95       	asr	r19
 15c:	27 95       	ror	r18
 15e:	c2 2f       	mov	r28, r18
 160:	c1 70       	andi	r28, 0x01	; 1
	bool rotation_detected = false;
	
	if (lastEncoderAState != A) {
 162:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 166:	82 17       	cp	r24, r18
 168:	f9 f0       	breq	.+62     	; 0x1a8 <__vector_3+0xa4>
		lastEncoderAState = A;
 16a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		if (A != B) {
 16e:	89 17       	cp	r24, r25
 170:	61 f0       	breq	.+24     	; 0x18a <__vector_3+0x86>
			count = (count == 9) ? 0 : count + 1;
 172:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 176:	89 30       	cpi	r24, 0x09	; 9
 178:	21 f0       	breq	.+8      	; 0x182 <__vector_3+0x7e>
 17a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	01 c0       	rjmp	.+2      	; 0x184 <__vector_3+0x80>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
 188:	0b c0       	rjmp	.+22     	; 0x1a0 <__vector_3+0x9c>
			} else {
			count = (count == 0) ? 9 : count - 1;
 18a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 18e:	88 23       	and	r24, r24
 190:	21 f0       	breq	.+8      	; 0x19a <__vector_3+0x96>
 192:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 196:	81 50       	subi	r24, 0x01	; 1
 198:	01 c0       	rjmp	.+2      	; 0x19c <__vector_3+0x98>
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
		}
		updateDisplay();
 1a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z13updateDisplayv>
		rotation_detected =true;
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <__vector_3+0xa6>
// Interrupt Service Routine
ISR(PCINT0_vect) {
	uint8_t A = (PINB >> DDB2) & 1;
	uint8_t B = (PINB >> DDB3) & 1;
	uint8_t SW = (PINB >> DDB4) & 1;
	bool rotation_detected = false;
 1a8:	90 e0       	ldi	r25, 0x00	; 0
		}
		updateDisplay();
		rotation_detected =true;
	}

	if (lastEncoderSWState != SW && !rotation_detected) {
 1aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lastEncoderSWState>
 1ae:	c8 17       	cp	r28, r24
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <__vector_3+0xc2>
 1b2:	91 11       	cpse	r25, r1
 1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <__vector_3+0xc2>
		if (SW == 0) {
 1b6:	c1 11       	cpse	r28, r1
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <__vector_3+0xbe>
			count = 0;
 1ba:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <count>
			updateDisplay();
 1be:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z13updateDisplayv>
		}
		lastEncoderSWState = SW;
 1c2:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <lastEncoderSWState>
	}
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	cf 91       	pop	r28
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <main>:

int main() {
	setup();
 1ea:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z5setupv>
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <main+0x4>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
