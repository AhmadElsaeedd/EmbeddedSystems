
Lab 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000196  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077d  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000117  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <stdint.h>
#include <util/delay.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	//set PortB2 to input
	DDRB &= ~(1<<DDB2);
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	84 b9       	out	0x04, r24	; 4
	//set PortB3 to input
	DDRB &= ~(1 << DDB3);
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	87 7f       	andi	r24, 0xF7	; 247
  b4:	84 b9       	out	0x04, r24	; 4
	//set all of PortD to output to control the 7-segment
	DDRD = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10
	
	//enabling the pull-up resistor to PB2 and PB3
	//this is done because we're connecting a button to those pins
	PORTB |= (1 << PORTB2);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PORTB3);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	85 b9       	out	0x05, r24	; 5
		0b01101101, // 0 1 1 0 1 1 0 1 -> 5
		0b01111101, // 0 1 1 1 1 1 0 1 -> 6
		0b00000111, // 0 0 0 0 0 1 1 1 -> 7
		0b01111111, // 0 1 1 1 1 1 1 1 -> 8
		0b01101111  // 0 1 1 0 1 1 1 1 -> 9
	};
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x3a>
	
	uint8_t current_digit = 0;
  d8:	90 e0       	ldi	r25, 0x00	; 0
    while (1) 
    {	
		//increment button is PB2
		if ((PINB & (1 << PINB2)))
  da:	1a 9b       	sbis	0x03, 2	; 3
  dc:	19 c0       	rjmp	.+50     	; 0x110 <main+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f e7       	ldi	r18, 0x7F	; 127
  e0:	3a e1       	ldi	r19, 0x1A	; 26
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x4e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x58>
  ee:	00 00       	nop
		{
			//this delay is to avoid debouncing
			_delay_ms(2000);
			current_digit = (current_digit + 1) % 10; //after 9 is 0
  f0:	89 2f       	mov	r24, r25
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	6a e0       	ldi	r22, 0x0A	; 10
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	0e 94 a1 00 	call	0x142	; 0x142 <__divmodhi4>
  fe:	98 2f       	mov	r25, r24
			PORTD = seven_segment_digits[current_digit]; //change the display
 100:	e1 e0       	ldi	r30, 0x01	; 1
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	ec 0f       	add	r30, r28
 106:	fd 1f       	adc	r31, r29
 108:	e8 0f       	add	r30, r24
 10a:	f1 1d       	adc	r31, r1
 10c:	80 81       	ld	r24, Z
 10e:	8b b9       	out	0x0b, r24	; 11
		}
		
		//decrement button is PB3
		if ((PINB & (1 << PINB3))){
 110:	1b 9b       	sbis	0x03, 3	; 3
 112:	e3 cf       	rjmp	.-58     	; 0xda <main+0x44>
 114:	2f e7       	ldi	r18, 0x7F	; 127
 116:	3a e1       	ldi	r19, 0x1A	; 26
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	30 40       	sbci	r19, 0x00	; 0
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x84>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x8e>
 124:	00 00       	nop
			//this delay is to avoid debouncing			
			_delay_ms(2000);
			if(current_digit == 0) current_digit = 9;
 126:	99 23       	and	r25, r25
 128:	11 f0       	breq	.+4      	; 0x12e <main+0x98>
			else current_digit--;
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <main+0x9a>
		
		//decrement button is PB3
		if ((PINB & (1 << PINB3))){
			//this delay is to avoid debouncing			
			_delay_ms(2000);
			if(current_digit == 0) current_digit = 9;
 12e:	99 e0       	ldi	r25, 0x09	; 9
			else current_digit--;
			
			PORTD = seven_segment_digits[current_digit]; //change the display
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e9 0f       	add	r30, r25
 13a:	f1 1d       	adc	r31, r1
 13c:	80 81       	ld	r24, Z
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	cc cf       	rjmp	.-104    	; 0xda <main+0x44>

00000142 <__divmodhi4>:
 142:	97 fb       	bst	r25, 7
 144:	07 2e       	mov	r0, r23
 146:	16 f4       	brtc	.+4      	; 0x14c <__divmodhi4+0xa>
 148:	00 94       	com	r0
 14a:	07 d0       	rcall	.+14     	; 0x15a <__divmodhi4_neg1>
 14c:	77 fd       	sbrc	r23, 7
 14e:	09 d0       	rcall	.+18     	; 0x162 <__divmodhi4_neg2>
 150:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
 154:	07 fc       	sbrc	r0, 7
 156:	05 d0       	rcall	.+10     	; 0x162 <__divmodhi4_neg2>
 158:	3e f4       	brtc	.+14     	; 0x168 <__divmodhi4_exit>

0000015a <__divmodhi4_neg1>:
 15a:	90 95       	com	r25
 15c:	81 95       	neg	r24
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	08 95       	ret

00000162 <__divmodhi4_neg2>:
 162:	70 95       	com	r23
 164:	61 95       	neg	r22
 166:	7f 4f       	sbci	r23, 0xFF	; 255

00000168 <__divmodhi4_exit>:
 168:	08 95       	ret

0000016a <__udivmodhi4>:
 16a:	aa 1b       	sub	r26, r26
 16c:	bb 1b       	sub	r27, r27
 16e:	51 e1       	ldi	r21, 0x11	; 17
 170:	07 c0       	rjmp	.+14     	; 0x180 <__udivmodhi4_ep>

00000172 <__udivmodhi4_loop>:
 172:	aa 1f       	adc	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	a6 17       	cp	r26, r22
 178:	b7 07       	cpc	r27, r23
 17a:	10 f0       	brcs	.+4      	; 0x180 <__udivmodhi4_ep>
 17c:	a6 1b       	sub	r26, r22
 17e:	b7 0b       	sbc	r27, r23

00000180 <__udivmodhi4_ep>:
 180:	88 1f       	adc	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	5a 95       	dec	r21
 186:	a9 f7       	brne	.-22     	; 0x172 <__udivmodhi4_loop>
 188:	80 95       	com	r24
 18a:	90 95       	com	r25
 18c:	bc 01       	movw	r22, r24
 18e:	cd 01       	movw	r24, r26
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
